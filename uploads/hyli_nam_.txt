section .data
    src_data db 0x12, 0x34, 0x56, 0x78
    src_len equ $ - src_data

section .bss
    result_data resb 2 * src_len

section .text
    global _start

_start:
    
    mov ax, 0x07C0
    add ax, 288
    mov ss, ax
    mov sp, 4096

    mov ax, 0x07C0
    mov ds, ax
    mov es, ax

    
    mov cx, src_len
    mov si, 0
    mov di, 0

convert_loop:
    mov al, [src_data + si]
    shl al, 1
    mov [result_data + di], al

    inc si
    inc di

    loop convert_loop

    int 0x20

Assembling file:   lab1.ASM
**Error** lab1.ASM(2) Illegal number
**Error** lab1.ASM(13) Illegal number
**Error** lab1.ASM(14) Code or data emission to undeclared segment
**Error** lab1.ASM(15) Code or data emission to undeclared segment
**Error** lab1.ASM(16) Code or data emission to undeclared segment
**Error** lab1.ASM(18) Illegal number
**Error** lab1.ASM(19) Code or data emission to undeclared segment
**Error** lab1.ASM(20) Code or data emission to undeclared segment
**Error** lab1.ASM(24) Code or data emission to undeclared segment
**Error** lab1.ASM(25) Code or data emission to undeclared segment
**Error** lab1.ASM(29) Code or data emission to undeclared segment
**Error** lab1.ASM(32) Code or data emission to undeclared segment
**Error** lab1.ASM(33) Code or data emission to undeclared segment
**Error** lab1.ASM(37) Illegal number
**Fatal** lab1.ASM(38) Unexpected end of file encountered
Error messages:    15
Warning messages:  None
Passes:            1
Remaining memory:  295k



C:\TASM>
1Help   2Menu   3View   4Edit   5Copy   6RenMov 7Mkdir  8Delete 9PullDn 10Quit










section .data
    src_data db 0x12, 0x34, 0x56, 0x78
    src_len equ $ - src_data

section .bss
    result_data resb 2 * src_len

section .text
    global _start

_start:
    mov ax, 0x07C0
    add ax, 288
    mov ss, ax
    mov sp, 4096

    mov ax, 0x07C0
    mov ds, ax
    mov es, ax

    mov cx, src_len
    xor si, si
    xor di, di

convert_loop:
    mov al, [src_data + si]
    shl al, 1
    mov [result_data + di], al

    inc si
    inc di

    loop convert_loop

    int 0x20
